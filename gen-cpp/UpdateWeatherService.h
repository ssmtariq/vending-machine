/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UpdateWeatherService_H
#define UpdateWeatherService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "vending_machine_types.h"

namespace vending_machine {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UpdateWeatherServiceIf {
 public:
  virtual ~UpdateWeatherServiceIf() {}
  virtual void UpdateWeather(const int64_t city, const WeatherType::type w) = 0;
};

class UpdateWeatherServiceIfFactory {
 public:
  typedef UpdateWeatherServiceIf Handler;

  virtual ~UpdateWeatherServiceIfFactory() {}

  virtual UpdateWeatherServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UpdateWeatherServiceIf* /* handler */) = 0;
};

class UpdateWeatherServiceIfSingletonFactory : virtual public UpdateWeatherServiceIfFactory {
 public:
  UpdateWeatherServiceIfSingletonFactory(const ::std::shared_ptr<UpdateWeatherServiceIf>& iface) : iface_(iface) {}
  virtual ~UpdateWeatherServiceIfSingletonFactory() {}

  virtual UpdateWeatherServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UpdateWeatherServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<UpdateWeatherServiceIf> iface_;
};

class UpdateWeatherServiceNull : virtual public UpdateWeatherServiceIf {
 public:
  virtual ~UpdateWeatherServiceNull() {}
  void UpdateWeather(const int64_t /* city */, const WeatherType::type /* w */) {
    return;
  }
};

typedef struct _UpdateWeatherService_UpdateWeather_args__isset {
  _UpdateWeatherService_UpdateWeather_args__isset() : city(false), w(false) {}
  bool city :1;
  bool w :1;
} _UpdateWeatherService_UpdateWeather_args__isset;

class UpdateWeatherService_UpdateWeather_args {
 public:

  UpdateWeatherService_UpdateWeather_args(const UpdateWeatherService_UpdateWeather_args&);
  UpdateWeatherService_UpdateWeather_args& operator=(const UpdateWeatherService_UpdateWeather_args&);
  UpdateWeatherService_UpdateWeather_args() : city(0), w((WeatherType::type)0) {
  }

  virtual ~UpdateWeatherService_UpdateWeather_args() noexcept;
  int64_t city;
  /**
   * 
   * @see WeatherType
   */
  WeatherType::type w;

  _UpdateWeatherService_UpdateWeather_args__isset __isset;

  void __set_city(const int64_t val);

  void __set_w(const WeatherType::type val);

  bool operator == (const UpdateWeatherService_UpdateWeather_args & rhs) const
  {
    if (!(city == rhs.city))
      return false;
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const UpdateWeatherService_UpdateWeather_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateWeatherService_UpdateWeather_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UpdateWeatherService_UpdateWeather_pargs {
 public:


  virtual ~UpdateWeatherService_UpdateWeather_pargs() noexcept;
  const int64_t* city;
  /**
   * 
   * @see WeatherType
   */
  const WeatherType::type* w;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UpdateWeatherService_UpdateWeather_result {
 public:

  UpdateWeatherService_UpdateWeather_result(const UpdateWeatherService_UpdateWeather_result&);
  UpdateWeatherService_UpdateWeather_result& operator=(const UpdateWeatherService_UpdateWeather_result&);
  UpdateWeatherService_UpdateWeather_result() {
  }

  virtual ~UpdateWeatherService_UpdateWeather_result() noexcept;

  bool operator == (const UpdateWeatherService_UpdateWeather_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UpdateWeatherService_UpdateWeather_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateWeatherService_UpdateWeather_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UpdateWeatherService_UpdateWeather_presult {
 public:


  virtual ~UpdateWeatherService_UpdateWeather_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UpdateWeatherServiceClient : virtual public UpdateWeatherServiceIf {
 public:
  UpdateWeatherServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UpdateWeatherServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UpdateWeather(const int64_t city, const WeatherType::type w);
  void send_UpdateWeather(const int64_t city, const WeatherType::type w);
  void recv_UpdateWeather();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UpdateWeatherServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UpdateWeatherServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UpdateWeatherServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UpdateWeather(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UpdateWeatherServiceProcessor(::std::shared_ptr<UpdateWeatherServiceIf> iface) :
    iface_(iface) {
    processMap_["UpdateWeather"] = &UpdateWeatherServiceProcessor::process_UpdateWeather;
  }

  virtual ~UpdateWeatherServiceProcessor() {}
};

class UpdateWeatherServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UpdateWeatherServiceProcessorFactory(const ::std::shared_ptr< UpdateWeatherServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< UpdateWeatherServiceIfFactory > handlerFactory_;
};

class UpdateWeatherServiceMultiface : virtual public UpdateWeatherServiceIf {
 public:
  UpdateWeatherServiceMultiface(std::vector<std::shared_ptr<UpdateWeatherServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UpdateWeatherServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UpdateWeatherServiceIf> > ifaces_;
  UpdateWeatherServiceMultiface() {}
  void add(::std::shared_ptr<UpdateWeatherServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UpdateWeather(const int64_t city, const WeatherType::type w) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateWeather(city, w);
    }
    ifaces_[i]->UpdateWeather(city, w);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UpdateWeatherServiceConcurrentClient : virtual public UpdateWeatherServiceIf {
 public:
  UpdateWeatherServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UpdateWeatherServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UpdateWeather(const int64_t city, const WeatherType::type w);
  int32_t send_UpdateWeather(const int64_t city, const WeatherType::type w);
  void recv_UpdateWeather(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
